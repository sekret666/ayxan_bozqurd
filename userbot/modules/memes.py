# RoBotlarimTg - BozQurd UserBot
# t.me/RoBotlarimTg
# t.me/aykhan_s
# t.me/BozQurdResmi
# Support - @BozQurdSup
# Owner - @aykhan_s

from asyncio import sleep
from random import choice, getrandbits, randint
from re import sub
import time
import asyncio

from collections import deque

import requests

from cowpy import cow

from userbot import CMD_HELP, ZALG_LIST
from userbot.events import register
from userbot.modules.admin import get_user_from_event
from userbot.cmdhelp import CmdHelp

# ================= CONSTANT =================
EMOJIS = [
    "üòÇ",
    "üòÇ",
    "üëå",
    "‚úå",
    "üíû",
    "üëç",
    "üëå",
    "üíØ",
    "üé∂",
    "üëÄ",
    "üòÇ",
    "üëì",
    "üëè",
    "üëê",
    "üçï",
    "üí•",
    "üç¥",
    "üí¶",
    "üí¶",
    "üçë",
    "üçÜ",
    "üò©",
    "üòè",
    "üëâüëå",
    "üëÄ",
    "üëÖ",
    "üò©",
    "üö∞",
]

UWUS = [
    "(„Éª`œâ¬¥„Éª)",
    ";;w;;",
    "owo",
    "UwU",
    ">w<",
    "^w^",
    r"\(^o\) (/o^)/",
    "( ^ _ ^)‚à†‚òÜ",
    "(√¥_√¥)",
    "~:o",
    ";-;",
    "(*^*)",
    "(>_",
    "(‚ô•_‚ô•)",
    "*(^O^)*",
    "((+_+))",
]

FACEREACTS = [
    " ò‚Äø ò",
    "„Éæ(-_- )„Çû",
    "(„Å£Àò⁄°ÀòœÇ)",
    "(¬¥–∂ÔΩÄœÇ)",
    "( ‡≤†  ñÃØ ‡≤†)",
    "(¬∞ Õú ñÕ°¬∞)‚ï≠‚à©‚ïÆ",
    "(·µü‡∫∂Ô∏µ ·µü‡∫∂)",
    "(‡∏á„ÉÑ)‡∏ß",
    " ö(‚Ä¢ÔΩÄ",
    "(„Å£‚ñÄ¬Ø‚ñÄ)„Å§",
    "(‚ó†Ôπè‚ó†)",
    "( Õ°‡≤†  ñÃØ Õ°‡≤†)",
    "( ‡∞† Õü ñ ‡∞†)",
    "(‚à©ÔΩÄ-¬¥)‚äÉ‚îÅ‚òÜÔæü.*ÔΩ•ÔΩ°Ôæü",
    "(‚äÉÔΩ°‚Ä¢ÃÅ‚Äø‚Ä¢ÃÄÔΩ°)‚äÉ",
    "(._.)",
    "{‚Ä¢ÃÉ_‚Ä¢ÃÉ}",
    "(·µî·¥•·µî)",
    "‚ô®_‚ô®",
    "‚•Ä.‚•Ä",
    "ÿ≠Àö‡Ø∞Àö„Å• ",
    "(“Ç‚ó°_‚ó°)",
    "∆™(⁄ì◊≤)‚Äé∆™‚Äã‚Äã",
    "(„Å£‚Ä¢ÃÅÔΩ°‚Ä¢ÃÅ)‚ô™‚ô¨",
    "‚óñ·µî·¥•·µî‚óó ‚ô™ ‚ô´ ",
    "(‚òûÔæü„ÉÆÔæü)‚òû",
    "[¬¨¬∫-¬∞]¬¨",
    "(‘æ‚Ä∏ ‘æ)",
    "(‚Ä¢ÃÄ·¥ó‚Ä¢ÃÅ)Ÿà ÃëÃë",
    "„Éæ(¬¥„Äá`)Ôæâ‚ô™‚ô™‚ô™",
    "(‡∏á'ÃÄ-'ÃÅ)‡∏á",
    "·Éö(‚Ä¢ÃÅ‚Ä¢ÃÅ·Éö)",
    " ï ‚Ä¢ÃÅÿà‚Ä¢ÃÄ ‚Çé",
    "‚ô™‚ô™ „ÉΩ(Àá‚àÄÀá )„Çû",
    "—âÔºàÔæü–îÔæü—âÔºâ",
    "( Àá‡∑¥Àá )",
    "Îàà_Îàà",
    "(‡πë‚Ä¢ÃÅ ‚ÇÉ ‚Ä¢ÃÄ‡πë) ",
    "( Àò ¬≥Àò)‚ô• ",
    "‘Ö(‚âñ‚Äø‚âñ‘Ö)",
    "‚ô•‚Äø‚ô•",
    "‚óî_‚óî",
    "‚ÅΩ‚ÅΩ‡¨ò( Àä·µïÀã )‡¨ì‚Åæ‚Åæ",
    "‰πÅ( ‚óî ‡±™‚óî)„Äå      ‚îë(Ôø£–î Ôø£)‚îç",
    "( ‡∞†‡µ†‡∞† )Ôæâ",
    "Ÿ©(‡πè_‡πè)€∂",
    "‚îå(„ÜÜ„â®„ÜÜ) É",
    "‡∞†_‡∞†",
    "(„Å•ÔΩ°‚óï‚Äø‚Äø‚óïÔΩ°)„Å•",
    "(„Éé‡≤† ‚à©‡≤†)„ÉéÂΩ°( \\o¬∞o)\\",
    "‚Äú„ÉΩ(¬¥‚ñΩÔΩÄ)„Éé‚Äù",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
    "ÔΩ°Ôæü( Ôæü‡Æá‚Ä∏‡ÆáÔæü)ÔæüÔΩ°",
    "(„Å•Ôø£ ¬≥Ôø£)„Å•",
    "(‚äô.‚òâ)7",
    "·ïï( ·êõ )·ïó",
    "t(-_-t)",
    "(‡≤•‚å£‡≤•)",
    "„ÉΩ‡ºº ‡≤†Áõä‡≤† ‡ºΩÔæâ",
    "‡ºº‚àµ‡ºΩ ‡ºº‚ç®‡ºΩ ‡ºº‚ç¢‡ºΩ ‡ºº‚ç§‡ºΩ",
    "„Éü‚óèÔπè‚òâ„Éü",
    "(‚äô_‚óé)",
    "¬ø‚ìß_‚ìßÔÆå",
    "‡≤†_‡≤†",
    "(¬¥ÔΩ•_ÔΩ•`)",
    "·ï¶(√≤_√≥Àá)·ï§",
    "‚äôÔπè‚äô",
    "(‚ïØ¬∞‚ñ°¬∞Ôºâ‚ïØÔ∏µ ‚îª‚îÅ‚îª",
    r"¬Ø\_(‚äôÔ∏ø‚äô)_/¬Ø",
    "Ÿ©‚óîÃØ‚óî€∂",
    "¬∞‚Äø‚Äø¬∞",
    "·ïô(‚áÄ‚Ä∏‚Üº‚Ä∂)·ïó",
    "‚äÇ(‚óâ‚Äø‚óâ)„Å§",
    "V‚Ä¢·¥•‚Ä¢V",
    "q(‚ùÇ‚Äø‚ùÇ)p",
    "‡≤•_‡≤•",
    "‡∏Ö^‚Ä¢Ôªå‚Ä¢^‡∏Ö",
    "‡≤•Ôπè‡≤•",
    "Ôºà ^_^ÔºâoËá™Ëá™oÔºà^_^ Ôºâ",
    "‡≤†‚Äø‡≤†",
    "„ÉΩ(¬¥‚ñΩ`)/",
    "·µí·¥•·µí#",
    "( Õ°¬∞ Õú ñ Õ°¬∞)",
    "‚î¨‚îÄ‚î¨Ôªø „Éé( „Çú-„Çú„Éé)",
    "„ÉΩ(¬¥„ÉºÔΩÄ)„Éé",
    "‚òú(‚åí‚ñΩ‚åí)‚òû",
    "Œµ=Œµ=Œµ=‚îå(;*¬¥–î`)Ôæâ",
    "(‚ï¨ ‡≤†Áõä‡≤†)",
    "‚î¨‚îÄ‚î¨‚É∞Õ°‚Äá(·µî·µï·µîÕú‚Äá)",
    "‚îª‚îÅ‚îª Ô∏µ„ÉΩ(`–î¬¥)ÔæâÔ∏µÔªø ‚îª‚îÅ‚îª",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    " ï·µî·¥•·µî î",
    "(`ÔΩ•œâÔΩ•¬¥)",
    " ï‚Ä¢·¥•‚Ä¢ î",
    "·Éö(ÔΩÄ„Éº¬¥·Éö)",
    " ï òÃÖÕú òÃÖ î",
    "Ôºà„ÄÄÔæü–îÔæüÔºâ",
    r"¬Ø\(¬∞_o)/¬Ø",
    "(ÔΩ°‚óï‚Äø‚óïÔΩ°)",
]

RUNS_STR = [
    "Hey! Hara Gedirs…ôn?",
    "N…ô…ô? qa√ßdƒ±lar?",
    "ZZzzZZzz... Noldu? yen…ô onlar imi≈ü, bo≈ü ver.",
    "Geri g…ôl!",
    "Qa√ßƒ±n OneBot g…ôlir!!",
    "Divara diqq…ôt el…ô!",
    "M…ôni onlarla t…ôk qoymaa!!",
    "Qa√ßarsan √∂l…ôrs…ôn.",
    "Zarafatcƒ±l s…ôni, m…ôn h…ôr yerd…ôy…ôm.",
    "Bunu el…ôdiyin…ô pe≈üman olacaqsan...",
    "/kickme d√ºym…ôsinid…ô yoxlaya bil…ôrs…ôn, ∆èyl…ônc…ôli olduƒüunu deyirl…ôr.",
    "Get ba≈üqa birini narahat el…ô, burda kims…ô vecin…ô almƒ±r.",
    "Qa√ßa bil…ôrs…ôn amma gizl…ôn…ô bilm…ôss…ôn.",
    "Ed…ô bildikl…ôrin bu q…ôd…ôrdi?",
    "Arxandayam...",
    "Qonaqlarƒ±n var!",
    "Bunu asan yoldan h…ôll ed…ô bil…ôrik, v…ôya √ß…ôtin yoldan.",
    "Anlamƒ±rsan h…ô?",
    "Haha, qa√ßsan yax≈üƒ± olar!",
    "Z…ôhm…ôt olmasa, xatƒ±rlat m…ôn…ô n…ô q…ôd…ôr vecimd…ôs…ôn?",
    "S…ônin yerind…ô olsam daha s√ºr…ôtli qa√ßardƒ±m.",
    "Bu axtardƒ±ƒüƒ±mƒ±z robotdur.",
    "B…ôlm…ô b…ôxt s…ôn…ô g√ºl…ôr.",
    "M…ô≈ühur son s√∂zl…ôr.",
    "V…ô sonsuza q…ôd…ôr yox oldular, he√ß g√∂r√ºnm…ôdil…ôr.",
    "\"Hey, m…ôn…ô baxƒ±n! Bottan qa√ßa bilir…ôm √ßox coolamüòé!\" - bu ≈ü…ôxs",
    "H…ô H…ô, üëâ /kickme üëà bas.",
    "Bu √ºz√ºy√º alƒ±n v…ô Mordor'a gedin.",
    "∆èfsanay…ô g√∂r…ô onlar h…ôl…ôd…ô i≈ül…ôyirl…ôr...",
    "Harry Potter'ƒ±n …ôksin…ô, valideyinl…ôtin s…ôni m…ônd…ôn qoruya bilm…ôz.",
    "Qorxu …ôs…ôb…ô, ∆ès…ôb nifr…ôt…ô, nifr…ôt acƒ±ya yol a√ßar. Qorxu i√ßind…ô qa√ßmaƒüa davam ets…ôn,"
    "bir sonrakƒ± Vader s…ôn ola bil…ôrs…ôn.",
    "∆èfsan…ôy…ô g√∂r…ô onlar h…ôl…ôd…ô i≈ül…ôyirl…ôr.",
    "Davam el…ô, s…ôni burda ist…ôdiyimiz…ô …ômin deyil…ôm.",
    "S…ôn bir sihirb- Oh. G√∂zl…ô. S…ôn Harry deyils…ôn, davam el…ô.",
    "KORƒ∞DORDA QA√áMAYINN!",
    "G√∂r√º≈ü…ôrik.",
    "Kim itl…ôri buraxd?",
    "G√ºlm…ôlidir √ß√ºn ki he√ß kim vecin…ô almƒ±r.",
    "Ah, n…ô b√∂y√ºk itki. Bu s…ôf…ôrkini sevmi≈üdim.",
    "A√ßƒ±qcasƒ± vecimd…ô deyil.",
    "H…ôqiq…ôti QALDIRA Bƒ∞LM∆èSS∆èN!",
    "Uzun zaman …ôvv…ôl, √ßox √ßox uzaqdakƒ± bir qalaksiya biril…ôri vecin…ô ala bil…ôrdi. Amma artƒ±q yox.",
    "Hey, onlara bax! Qa√ßƒ±nƒ±lmaz banhammer'dan qa√ßƒ±rlar... N…ô q…ôd…ôrd…ô ≈üirin.",
    "Aƒü dov≈üanƒ±n, arxasƒ±nda n…ô edirs…ôn!?",
    "H…ôkimind…ô dediyi kimi... QA√á!",
]

HELLOSTR = [
    "Salaamm",
    "‚ÄòN…ô var n…ô yox M√ºd√ºr!",
    "Nec…ôs…ôn?",
    "‚ÄòHey Nolub?",
    "Salam! Salam! Salam!",
    "Salam, kim var orda!?, M…ôn danƒ±≈üƒ±ram.",
    "Bunun kim olduƒüunu bilirs…ôn",
    "Hey Yo!",
    "N…ôt…ôrs…ôn",
    "Salamlar v…ô Salamlar!",
    "Salam, g√ºn i≈üƒ±ƒüƒ±!",
    "Hey, n…ôt…ôrs…ôn, salam!",
    "Nec…ô gedir‚Äô, balaca c√ºc…ô?",
    "B√∂√∂√∂!",
    "Salam, birinci sinif u≈üaƒüƒ±!",
    "Barƒ±≈üaq!",
    "Salam, dostum!",
    "Salam!",
]

SHGS = [
    "‚îê(¬¥–¥ÔΩÄ)‚îå",
    "‚îê(¬¥ÔΩûÔΩÄ)‚îå",
    "‚îê(¬¥„ÉºÔΩÄ)‚îå",
    "‚îê(Ôø£„ÉòÔø£)‚îå",
    "‚ïÆ(‚ïØ‚àÄ‚ï∞)‚ï≠",
    "‚ïÆ(‚ïØ_‚ï∞)‚ï≠",
    "‚îê(¬¥–¥`)‚îå",
    "‚îê(¬¥‚àÄÔΩÄ)‚îå",
    " Ö(ÃÅ‚ó°‚óù) É",
    "‚îê(ÔæüÔΩûÔæü)‚îå",
    "‚îê('–¥')‚îå",
    "‚îê(‚ÄòÔΩû`;)‚îå",
    "„Éò(¬¥ÔºçÔΩÄ;)„Éò",
    "‚îê( -‚Äú-)‚îå",
    " ÖÔºà¬¥‚óî‡±™‚óîÔºâ É",
    "„ÉΩ(„ÇúÔΩû„Çúo)„Éé",
    "„ÉΩ(~ÔΩû~ )„Éé",
    "‚îê(~„Éº~;)‚îå",
    "‚îê(-„ÄÇ„Éº;)‚îå",
    r"¬Ø\_(„ÉÑ)_/¬Ø",
    r"¬Ø\_(‚äô_ ñ‚äô)_/¬Ø",
    r"¬Ø\_‡ºº ‡≤• ‚Äø ‡≤• ‡ºΩ_/¬Ø",
    "‰πÅ( ‚Å∞Õ°  ƒπÃØ ‚Å∞Õ° ) „Ñè",
]

CRI = [
    "ÿ£‚Äøÿ£",
    "‚ï•Ôπè‚ï•",
    "(;Ôπè;)",
    "(ToT)",
    "(‚î≥–î‚î≥)",
    "(‡≤•Ôπè‡≤•)",
    "ÔºàÔºõ„Å∏ÔºöÔºâ",
    "(TÔºøT)",
    "ÔºàœÄ„ÉºœÄÔºâ",
    "(Ôº¥‚ñΩÔº¥)",
    "(‚ãüÔπè‚ãû)",
    "ÔºàÔΩâ–îÔΩâÔºâ",
    "(¬¥–î‚äÇ„ÉΩ",
    "(;–î;)",
    "Ôºà>Ôπè<Ôºâ",
    "(T–¥T)",
    "(„Å§Ôπè‚äÇ)",
    "‡ºº‚òØÔπè‚òØ‡ºΩ",
    "(„ÉéÔπè„ÉΩ)",
    "(„ÉéA„ÉΩ)",
    "(‚ï•_‚ï•)",
    "(T‚åìT)",
    "(‡ºé‡∫∂‚åë‡ºé‡∫∂)",
    "(‚òçÔπè‚Å∞)ÔΩ°",
    "(‡≤•_ ñ‡≤•)",
    "(„Å§–¥‚äÇ)",
    "(‚âñÕû_‚âñÃ•)",
    "(‡ÆáÔπè‡Æá`ÔΩ°)",
    "‡ºº‡≤¢_‡≤¢‡ºΩ",
    "‡ºº ‡ºé‡∫∂ ‡∑¥ ‡ºé‡∫∂‡ºΩ",
]

SLAP_TEMPLATES = [
    "{victim} isdifad…ô√ßisini {item} il…ô {hits} .",
    "{victim} isdifad…ô√ßisini {item} il…ô √ºz√ºn…ô {hits} .",
    "{victim} isdifad…ô√ßisini {item} i…ô biraz {hits} .",
    "{victim} isdifad…ô√ßisin…ô {item} {throws} .",
    "{victim} isdifad…ô√ßisini {item} ile y√ºz√ºne {throws} .",
    "{victim} isdifad…ô√ßisin…ô t…ôr…ôf {item} atƒ±r.",
    "{victim} axmaqƒ±na {item} il…ô ≈üill…ô vurur.",
    "{victim} isdifad…ô√ßisini yer…ô sabitl…ôyib arxa arxaya {item} il…ô {hits} .",
    "{item} alaraq {victim} {hits}.",
    "{victim} isdifad…ô√ßisini stola baƒülayƒ±b {item} {throws} .",
    "{victim} isdifad…ô√ßisini dostca it…ôl…ôy…ôr…ôk lavada √ºzm…ôyi √∂rg…ônm…ôsini ist…ôyir."
]

ITEMS = [
    "d…ômir tava",
    "b√∂y√ºk alabalƒ±ƒü",
    "beyzbol √ßubuƒüu",
    "kriket √ßubuƒüu",
    "taxta",
    "mismar",
    "yazƒ±cƒ±",
    "k√ºr…ôk",
    "t√ºpl√º monitor",
    "fizik d…ôft…ôri",
    "tost ma≈üƒ±nƒ±",
    "Mona Liza portreti",
    "televizor",
    "be≈ü ton kamaz",
    "kitab",
    "diz√ºst√º komp√ºter",
    "iPhone 11 Pro",
    "plastik toyuq",
    "mismarlƒ± √ßubuƒü",
    "yanƒüƒ±n s√∂nd√ºr√ºc√º",
    "kubik",
    "kir yƒ±ƒüƒ±nƒ±",
    "arƒ± p…ôt…ôyi",
    "√ß√ºr√ºk …ôt",
    "fil",
    "kola",
]

THROW = [
    "atƒ±r",
    "tullayƒ±r",
    "fƒ±rladƒ±r",
    "yaƒüdƒ±rƒ±r",
]

HIT = [
    "vurur",
    "m√∂hk…ôm vurur",
    "≈üill…ôl…ôyir",
    "yumruqlayƒ±r",
    "ke√ßirir",
]

# ===========================================

@register(outgoing=True, pattern="^.heyvan ?(.*)")
async def hayvan(e):
    arg = e.pattern_match.group(1)
    if arg == "pi≈üik":
        args = "cat"
    elif arg == "it":
        args = "dog"
    elif arg == "qu≈ü":
        args = "birb"
    elif arg == "qurd":
        args = "fox"
    elif arg == "panda":
        args = "panda"
    else:
        arg = "pi≈üik"
        args = "cat"

    foto = requests.get(f'https://some-random-api.ml/img/{args}').json()["link"]
    await e.delete()
    await e.client.send_message(
        e.chat_id,
        f"`T…ôsad√ºfi {arg} ≈ü…ôkli`\n@UserLandResmi",
        file=foto
    )

@register(outgoing=True, pattern="^.qerar$")
async def karar(e):
    msaj = ""
    if e.reply_to_msg_id:
        rep = await e.get_reply_message()
        replyto = rep.id
        msaj += f"[Dostum](tg://user?id={rep.from_id}), "
    else:
        e.edit("`Z…ôhm…ôt olmasa bir mesaja cavab verin.`")
        return
    yesno = requests.get('https://yesno.wtf/api').json()
    if yesno["answer"] == "yes":
        cevap = "h…ô"
    else:
        cevap = "yox"
    msaj += f"Dey…ôs…ôn buna {cevap} dey…ôc…ôm."

    await e.delete()
    await e.client.send_message(
        e.chat_id,
        msaj,
        reply_to=replyto,
        file=yesno["image"]
    )

@register(outgoing=True, pattern=r"^.(\w+)say (.*)")
async def univsaye(cowmsg):
    arg = cowmsg.pattern_match.group(1).lower()
    text = cowmsg.pattern_match.group(2)

    if arg == "cow":
        arg = "default"
    if arg not in cow.COWACTERS:
        return
    cheese = cow.get_cow(arg)
    cheese = cheese()

    await cowmsg.edit(f"`{cheese.milk(text).replace('`', '¬¥')}`")


@register(outgoing=True, pattern="^:/$", ignore_unsafe=True)
async def kek(keks):
    """ . """
    uio = ["/", "\\"]
    for i in range(1, 15):
        time.sleep(0.3)
        await keks.edit(":" + uio[i % 2])


@register(pattern="^.vur(?: |$)(.*)", outgoing=True)
async def who(event):
    replied_user = await get_user_from_event(event)
    if replied_user:
        replied_user = replied_user[0]
    else:
        return
    caption = await slap(replied_user, event)

    try:
        await event.edit(caption)

    except BaseException:
        await event.edit(
            "`Bu isidfad…ô√ßini vura bilm…ôr…ôm, yanƒ±ma √ßubuq v…ô da≈ü almalƒ±yam!!`"
        )


async def slap(replied_user, event):
    user_id = replied_user.id
    first_name = replied_user.first_name
    username = replied_user.username

    if username:
        slapped = "@{}".format(username)
    else:
        slapped = f"[{first_name}](tg://user?id={user_id})"

    temp = choice(SLAP_TEMPLATES)
    item = choice(ITEMS)
    hit = choice(HIT)
    throw = choice(THROW)

    caption = "@UserLandResmi " + temp.format(
        victim=slapped, item=item, hits=hit, throws=throw)

    return caption


@register(outgoing=True, pattern="^-_-$", ignore_unsafe=True)
async def lol(lel):
    """ Tm """
    okay = "-_-"
    for i in range(10):
        okay = okay[:-1] + "_-"
        await lel.edit(okay)


@register(outgoing=True, pattern="^;_;$", ignore_unsafe=True)
async def fun(e):
    t = ";_;"
    for j in range(10):
        t = t[:-1] + "_;"
        await e.edit(t)


@register(outgoing=True, pattern="^.utan$")
async def facepalm(e):
    await e.edit("ü§¶‚Äç‚ôÇ")


@register(outgoing=True, pattern="^.agla$")
async def cry(e):
    await e.edit(choice(CRI))


@register(outgoing=True, pattern="^.cp(?: |$)(.*)")
async def copypasta(cp_e):
    """ salam """
    textx = await cp_e.get_reply_message()
    message = cp_e.pattern_match.group(1)

    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await cp_e.edit("`üòÇM…ôn…ôüíØBIR‚úåÔ∏èmEüÖ±Ô∏èInüëêVerüëè`")
        return

    reply_text = choice(EMOJIS)
    b_char = choice(message).lower()
    for owo in message:
        if owo == " ":
            reply_text += choice(EMOJIS)
        elif owo in EMOJIS:
            reply_text += owo
            reply_text += choice(EMOJIS)
        elif owo.lower() == b_char:
            reply_text += "üÖ±Ô∏è"
        else:
            if bool(getrandbits(1)):
                reply_text += owo.upper()
            else:
                reply_text += owo.lower()
    reply_text += choice(EMOJIS)
    await cp_e.edit(reply_text)


@register(outgoing=True, pattern="^.vapor(?: |$)(.*)")
async def vapor(vpr):
    reply_text = list()
    textx = await vpr.get_reply_message()
    message = vpr.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await vpr.edit("`M…ôn…ô Bir M…ôtn Ver!`")
        return

    for charac in message:
        if 0x21 <= ord(charac) <= 0x7F:
            reply_text.append(chr(ord(charac) + 0xFEE0))
        elif ord(charac) == 0x20:
            reply_text.append(chr(0x3000))
        else:
            reply_text.append(charac)

    await vpr.edit("".join(reply_text))


@register(outgoing=True, pattern="^.str(?: |$)(.*)")
async def stretch(stret):
    textx = await stret.get_reply_message()
    message = stret.text
    message = stret.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await stret.edit("`M…ôn…ô…ô…ô…ô…ô Biiiiiiirr M…ôtnnnnnnn Verrrr!`")
        return

    count = randint(3, 10)
    reply_text = sub(r"([aeiouAEIOUÔΩÅÔΩÖÔΩâÔΩèÔΩïÔº°Ôº•Ôº©ÔºØÔºµ–∞–µ–∏–æ—É—é—è—ã—ç—ë])", (r"\1" * count),
                     message)
    await stret.edit(reply_text)


@register(outgoing=True, pattern="^.zal(?: |$)(.*)")
async def zal(zgfy):
    """ Kaos """
    reply_text = list()
    textx = await zgfy.get_reply_message()
    message = zgfy.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await zgfy.edit(
            "`Ôº¢Õ¨Ã∫ÔΩÅÕëÃ†ÔΩéÃµÃâÔΩÅÃ¨Õú ÔΩÇÕîÃ∂ÔΩâÃºÕöÔΩíÕàÕû ÔΩçÃºÕòÔΩÖÃ®ÃùÔΩîÕîÕôÔΩâÕÆÃ¢ÔΩéÃúÕó ÔΩñÕ¢ÕúÔΩÖÕêÃóÔΩíÕÆÃ¥`"
        )
        return

    for charac in message:
        if not charac.isalpha():
            reply_text.append(charac)
            continue

        for _ in range(0, 3):
            charac += choice(ZALG_LIST[randint(0,2)]).strip()

        reply_text.append(charac)

    await zgfy.edit("".join(reply_text))
    

@register(outgoing=True, pattern="^.salam$")
async def hoi(hello):
    await hello.edit(choice(HELLOSTR))


@register(outgoing=True, pattern="^.owo(?: |$)(.*)")
async def faces(owo):
    textx = await owo.get_reply_message()
    message = owo.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await owo.edit("` UwU m…ôn…ô bir m…ôtn ver! `")
        return

    reply_text = sub(r"(r|l)", "w", message)
    reply_text = sub(r"(R|L)", "W", reply_text)
    reply_text = sub(r"n([aeiou])", r"ny\1", reply_text)
    reply_text = sub(r"N([aeiouAEIOU])", r"Ny\1", reply_text)
    reply_text = sub(r"\!+", " " + choice(UWUS), reply_text)
    reply_text = reply_text.replace("ove", "uv")
    reply_text += " " + choice(UWUS)
    await owo.edit(reply_text)


@register(outgoing=True, pattern="^.react$")
async def react_meme(react):
    await react.edit(choice(FACEREACTS))


@register(outgoing=True, pattern="^.shg$")
async def shrugger(shg):
    r""" ¬Ø\_(„ÉÑ)_/¬Ø """
    await shg.edit(choice(SHGS))


@register(outgoing=True, pattern="^.qa[√ßc]$")
async def runner_lol(run):
    await run.edit(choice(RUNS_STR))


@register(outgoing=True, pattern="^oof$")
async def oof(e):
    t = "oof"
    for j in range(16):
        t = t[:-1] + "of"
        await e.edit(t)

                      
@register(outgoing=True, pattern="^Pff$")
async def Oof(e):
    t = "Pff"
    for j in range(16):
        t = t[:-1] + "ff"
        await e.edit(t)

@register(outgoing=True, pattern="^.[√ºu]rek (.*)")
async def _(event):
    if event.fwd_from:
        return
    input_str = event.pattern_match.group(1)
    deq = deque(list("Ô∏è‚ù§Ô∏èüß°üíõüíöüíôüíúüñ§"))
    for _ in range(32):
        await asyncio.sleep(0.1)
        await event.edit("".join(deq))
        deq.rotate(1)
    await event.edit("‚ù§Ô∏èüß°üíõ" + input_str + "üíöüíôüíúüñ§")    


@register(outgoing=True, pattern="^.ay$")
async def moon(event):
    deq = deque(list("üåóüåòüåëüåíüåìüåîüåïüåñ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.clock$")
async def clock(event):
    deq = deque(list("üïôüïòüïóüïñüïïüïîüïìüïíüïëüïêüïõ"))
    try:
        for x in range(32):
            await sleep(0.1)
            await event.edit("".join(deq))
            deq.rotate(1)
    except BaseException:
        return


@register(outgoing=True, pattern="^.clap(?: |$)(.*)")
async def claptext(memereview):
    textx = await memereview.get_reply_message()
    message = memereview.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await memereview.edit("`M…ônasƒ±z bir ≈ü…ôkild…ô alqƒ±≈ülayƒ±ram...`")
        return
    reply_text = "üëè "
    reply_text += message.replace(" ", " üëè ")
    reply_text += " üëè"
    await memereview.edit(reply_text)


@register(outgoing=True, pattern=r"^.f (.*)")
async def payf(event):
    paytext = event.pattern_match.group(1)
    pay = "{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}\n{}".format(
        paytext * 8, paytext * 8, paytext * 2, paytext * 2, paytext * 2,
        paytext * 6, paytext * 6, paytext * 2, paytext * 2, paytext * 2,
        paytext * 2, paytext * 2)
    await event.edit(pay)

@register(outgoing=True, pattern=r"^.bo[s≈ü]luq")
async def bosluk(event):
    await event.delete()
    await event.reply('„Ö§')

@register(outgoing=True, pattern="^.lfy (.*)")
async def let_me_google_that_for_you(lmgtfy_q):
    textx = await lmgtfy_q.get_reply_message()
    qry = lmgtfy_q.pattern_match.group(1)
    if qry:
        query = str(qry)
    elif textx:
        query = textx
        query = query.message
    query_encoded = query.replace(" ", "+")
    lfy_url = f"http://lmgtfy.com/?s=g&iie=1&q={query_encoded}"
    payload = {'format': 'json', 'url': lfy_url}
    r = requests.get('http://is.gd/create.php', params=payload)
    await lmgtfy_q.edit(f"Al, kefin…ô bax.\
    \n[{query}]({r.json()['shorturl']})")


@register(pattern=r".scam(?: |$)(.*)", outgoing=True)
async def scam(event):
    options = [
        'typing', 'contact', 'game', 'location', 'voice', 'round', 'video',
        'photo', 'document', 'cancel'
    ]
    input_str = event.pattern_match.group(1)
    args = input_str.split()
    if len(args) == 0:
        scam_action = choice(options)
        scam_time = randint(30, 60)
    elif len(args) == 1:
        try:
            scam_action = str(args[0]).lower()
            scam_time = randint(30, 60)
        except ValueError:
            scam_action = choice(options)
            scam_time = int(args[0])
    elif len(args) == 2:
        scam_action = str(args[0]).lower()
        scam_time = int(args[1])
    else:
        await event.edit("`Invalid Syntax !!`")
        return
    try:
        if (scam_time > 0):
            await event.delete()
            async with event.client.action(event.chat_id, scam_action):
                await sleep(scam_time)
    except BaseException:
        return


@register(pattern=r".type(?: |$)(.*)", outgoing=True)
async def typewriter(typew):
    textx = await typew.get_reply_message()
    message = typew.pattern_match.group(1)
    if message:
        pass
    elif textx:
        message = textx.text
    else:
        await typew.edit("`M…ôn…ô bir m…ôtn ver!!`")
        return
    sleep_time = 0.03
    typing_symbol = "|"
    old_text = ""
    await typew.edit(typing_symbol)
    await sleep(sleep_time)
    for character in message:
        old_text = old_text + "" + character
        typing_text = old_text + "" + typing_symbol
        await typew.edit(typing_text)
        await sleep(sleep_time)
        await typew.edit(old_text)
        await sleep(sleep_time)

CmdHelp('memes').add_command(
    'heyvan', 'pi≈üik/it/panda/qu≈ü/qurd', 'T…ôsad√ºfi bir heyvan ≈ü…ôkli.'
).add_command(
    'cowsay', None, 'Bir ≈üeyl…ôr dey…ôn in…ôküêÆ'
).add_command(
    ':/', None, 'Yoxla g√∂r :)'
).add_command(
    'karar', None, 'Q…ôrar verin.'
).add_command(
    '-_-', None, 'Tamamdƒ±r.\n-Bird…ôn…ôm Usta'
).add_command(
    ';_;', None, '5 d…ôqiq…ôdir qaynanƒ±nƒ± g√∂rm…ôdiyini d√º≈ü√ºn.'
).add_command(
    'cp', '<yanƒ±t>', 'M…ôtn…ô emoji …ôlav…ô edir.'
).add_command(
    'vapor', '<mesaj/cavab>', 'Vaporla≈üdƒ±rƒ±n!'
).add_command(
    'str', '<yazƒ±>', 'Yazƒ±nƒ± uzadƒ±n.'
).add_command(
    'zal', '<cavab/m…ôtn>', '√áox q…ôrib…ôdir :/'
).add_command(
    'pff', None, 'Pff'
).add_command(
    'urek', '<ad>', 'Sevginizi g√∂st…ôrin.'
).add_command(
    'fp', None, 'Utanmaq'
).add_command(
    'ag', None, 'Ay animasiyasƒ±.'
).add_command(
    'clock', None, 'Saat animasiyasƒ±'
).add_command(
    'salam', None, 'Salam verin.'
).add_command(
    'owo', None, 'UwU'
).add_command(
    'react', None, 'H…ôr ≈üey…ô reaksiya ver…ôr.'
).add_command(
    'slap', '<cavab>', 'T…ôsad√ºfi …ô≈üyalarla vurmaq √º√ß√ºn mesaja cavab verin.'
).add_command(
    'cry', None, 'Aƒülamaq ist…ôyirs…ôn ?'
).add_command(
    'shg', None, '¬Ø\_(„ÉÑ)_/¬Ø'
).add_command(
    'run', None, 'Qa√ß!'
).add_command(
    'mock', '<cavab/mesaj>', 'Et v…ô ∆èyl…ônc…ôni tap.'
).add_command(
    'clap', None, 'Alqƒ±≈ü :)'
).add_command(
    'f', '<mesaj>', 'F'
).add_command(
    'type', '<yazƒ±>', 'Daktilo kimi yazƒ±n.'
).add_command(
    'lfy', '<sorƒüu>', 'Bƒ±rakƒ±n Google bunu sizin i√ßin ara≈ütƒ±rsƒ±n.'
).add_command(
    'scam', '<eylem> <s√ºre>', 'Sahte eylemler olu≈üturun.\nMevcut eylemler: (typing, contact, game, location, voice, round, video, photo, document, cancel)'
).add_command(
    'lfy', '<sorgu>', 'Buxarƒ±n Google bunu sizin √º√ß√ºn ara≈üdƒ±rsƒ±n.'
).add_command(
    'bo≈üluq', None, 'Bo≈ü mesaj.'
).add()
